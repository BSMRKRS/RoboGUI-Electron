{
  "_from": "open-in-editor",
  "_id": "open-in-editor@2.2.0",
  "_inBundle": false,
  "_integrity": "sha1-xbIap29qzUy708Oy533MtLdaICA=",
  "_location": "/open-in-editor",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "open-in-editor",
    "fetchSpec": "latest",
    "name": "open-in-editor",
    "raw": "open-in-editor",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/open-in-editor/-/open-in-editor-2.2.0.tgz",
  "_shasum": "c5b21aa76f6acd4cbbd3c3b2e77dccb4b75a2020",
  "_spec": "open-in-editor",
  "_where": "/Users/voss/RoboGUI-Electron",
  "author": {
    "email": "rdvornov@gmail.com",
    "name": "Roman Dvornov"
  },
  "bin": {
    "oe": "./bin/oe"
  },
  "bugs": {
    "url": "https://github.com/lahmatiy/open-in-editor/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "clap": "^1.1.3",
    "os-homedir": "~1.0.2"
  },
  "deprecated": false,
  "description": "Open file in editor",
  "devDependencies": {},
  "engines": {
    "node": ">=0.12.0"
  },
  "homepage": "https://github.com/lahmatiy/open-in-editor#readme",
  "keywords": [
    "atom",
    "code",
    "editor",
    "emacs",
    "file",
    "idea",
    "open",
    "phpstorm",
    "sublime",
    "vim",
    "visual studio",
    "vscode",
    "webstorm"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "open-in-editor",
  "optionalDependencies": {},
  "readme": "[![NPM version](https://img.shields.io/npm/v/open-in-editor.svg)](https://www.npmjs.com/package/open-in-editor)\n\nNPM package to open a file in editor.\n\nSupported editors:\n\n- [Sublime Text](http://www.sublimetext.com/)\n- [Atom Editor](https://atom.io/)\n- [Visual Studio Code](https://code.visualstudio.com/)\n- [WebStorm](https://www.jetbrains.com/webstorm/)\n- [PhpStorm](https://www.jetbrains.com/phpstorm/)\n- [IDEA 14 Community Edition](https://www.jetbrains.com/idea/download/)\n- [Vim](http://www.vim.org/)\n- [Emacs](https://www.gnu.org/software/emacs/)\n- [Visual Studio](https://www.visualstudio.com/)\n\nYou also can use any other editor that is able to open files from command line.\n\n## Installation\n\n```\nnpm install open-in-editor\n```\n\n## Usage\n\nFirst of all you should create an interface with your settings.\n\n```js\nvar openInEditor = require('open-in-editor');\nvar editor = openInEditor.configure({\n  // options\n}, function(err) {\n  console.error('Something went wrong: ' + err);\n});\n```\n\nResulting object has a single method `open`. This method runs terminal command that opens an editor. Result of this method is a promise:\n\n```js\neditor.open('path/to/file.js:3:10')\n  .then(function() {\n    console.log('Success!');\n  }, function(err) {\n    console.error('Something went wrong: ' + err);\n  });\n```\n\n## API\n\n```\nopenInEditor.configure([options][, failCallback]);\n```\n\nArguments:\n\n- `options` – *optional* is used to set up a command to launch an editor. If no options set it will try to get the command from [environment](#environment)\n- `failCallback` – *optional* function that is called when something's wrong with editor setup.\n\nIf editor setup was successful `configure` method returns an interface with single method `open`. The method accepts file reference with the following format: `filename[:line[:column]]`, where `line` and `column` tell the editor where to place cursor when file is opened.\n\n### Options\n\n#### editor\n\nType: `String` or `null`  \nValues: `'sublime'`, `'atom'`, `'code'`, `'webstorm'`, `'phpstorm'`, `'idea14ce'`, `'vim'`, `'emacs'`, `'visualstudio'`  \nDefault: `null`\n\nEditor to open a file. Once value is set, we try to detect a command to launch an editor.\n\nSupported editors:\n\n- `sublime` – Sublime Text\n- `atom` – Atom Editor\n- `code` – Visual Studio Code\n- `webstorm` – WebStorm\n- `phpstorm` - PhpStorm\n- `idea14ce` – IDEA 14 CE\n- `vim` – Vim (via Terminal, Mac OS only)\n- `emacs` – Emacs (via Terminal, Mac OS only)\n- `visualstudio` – Visual Studio\n\n#### cmd\n\nType: `String` or `null`  \nDefault: `null`\n\nCommand to launch an editor.\n\n```js\nvar openInEditor = require('open-in-editor');\nvar editor = openInEditor.configure({\n  cmd: '/path/to/editor/app'\n});\n```\n\nIf `editor` option is also set, an editor settings are using as default settings.\n\n```js\nvar openInEditor = require('open-in-editor');\nvar editor = openInEditor.configure({\n  editor: 'code',\n  cmd: '/path/to/editor/app' // will be called as '/path/to/editor/app -r -g {filename}:{line}:{column}'\n});\n```\n\n#### pattern\n\nType: `String` or `null`  \nDefault: `null`\n\nOption to specify arguments for a command. Pattern can contain placeholders to be replaced by actual values. Supported placeholders: `filename`, `line` and `column`.\n\n```js\nvar openInEditor = require('open-in-editor');\nvar editor = openInEditor.configure({\n  cmd: 'code',\n  pattern: '-r -g {filename}:{line}:{column}'\n});\n```\n\nIf there's no `{filename}` placeholder in the command then `{filename}:{line}:{column}` is appended. That way previous example can be simplified:\n\n```js\nvar openInEditor = require('open-in-editor');\nvar editor = openInEditor.configure({\n  cmd: 'code',\n  pattern: '-r -g' // the same as '-r -g {filename}:{line}:{column}'\n});\n```\n\n#### line\n\nType: `Number`  \nDefault: `1`\n\nDefines the number of the first line in the editor. Usually it's `1`, but you can set it to `0`.\n\n#### column\n\nType: `Number`  \nDefault: `1`\n\nDefines the number of the first column in the editor. Usually it's `1`, but you can set it to `0`.\n\n\n## Environment\n\nIf no `editor` or `cmd` option is specified, we try to get the command to launch an editor using environment settings. Following values can be used (in descending priority):\n\n- `process.env.OPEN_FILE`\n- `process.env.VISUAL`\n- `process.env.EDITOR`\n\nFirst value found is used. If it's `process.env.VISUAL` or `process.env.EDITOR`, it's used directly as `cmd` option. But `process.env.OPEN_FILE` is different: if value is a valid for `editor` option, it's used for it, otherwise it's used as a value for `cmd` option.\n\nYou can set env settings per command:\n\n```\nOPEN_FILE=atom oe path/to/file.js:4:15\nOPEN_FILE=\"code -r -g\" node script.js\n```\n\n## CLI\n\nPackage could be installed globally.\n\n```\nnpm install open-in-editor -g\n```\n\nIn this case `oe` command will be available in terminal.\n\n```\nUsage:\n\n  oe [filename] [options]\n\nOptions:\n\n      --cmd <command>      Command to open file\n      --debug              Debug errors\n  -e, --editor <editor>    Editor: atom, code, sublime, webstorm, phpstorm, idea14ce, vim, visualstudio, emacs\n  -f, --file <filename>    File to open\n  -h, --help               Output usage information\n  -p, --pattern <pattern>  Filename pattern and args, i.e. something going after cmd\n  -v, --version            Output the version\n```\n\n## Related projects\n\n- [express-open-in-editor](https://github.com/lahmatiy/express-open-in-editor) – `Express` extension to open files from browser.\n- [babel-plugin-source-wrapper](https://github.com/restrry/babel-plugin-source-wrapper) – `Babel` plugin that instruments source code to associate objects with location they defined in code base.\n- [Component Inspector](https://github.com/lahmatiy/component-inspector) – developer tool to inspect components that can open component creation source location in editor. Has integrations for `React`, `Backbone` and can be adopted for other frameworks.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lahmatiy/open-in-editor.git"
  },
  "scripts": {},
  "version": "2.2.0"
}
